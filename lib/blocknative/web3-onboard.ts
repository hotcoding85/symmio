import Onboard from "@web3-onboard/core";
import coinbaseWallet from "@web3-onboard/coinbase";
import injected from "@web3-onboard/injected-wallets";
import walletConnectModule from "@web3-onboard/walletconnect";
import trustWallet from "@web3-onboard/trust";
import bitgetWallet from "@web3-onboard/bitget/dist/index";
import metamask from "@web3-onboard/metamask";

import { Notify } from "@web3-onboard/core";

const notifyOptions = {
  enabled: false, // Disable all notifications
};

// Configure WalletConnect options
const walletConnectOptions = {
  // Set your WalletConnect configuration options here
  projectId:
    process.env.WALLETCONNECT_PROJECT_ID ||
    "1DSWHiAW1iSFYVb86WQQUPn57iQ6W1DjGo",
};

// Detect Rabby provider
const getRabbyProvider = () => {
  // if (typeof window === "undefined") return null;

  // const { ethereum } = window as any;

  // if (ethereum?.providers) {
  //   return ethereum.providers.find((provider: any) => provider.isRabby);
  // } else if (ethereum?.isRabby) {
  //   return ethereum;
  // }

  return null;
};

const metamaskOptions = {
  options: {
    dappMetadata: { url: "localhost:3000" },
  },
};

const injectedWallets = injected({
  // Customize which wallets should be displayed
  displayUnavailable: false, // Set to true to show unavailable wallets
});

const wallets = [
  injectedWallets,
  coinbaseWallet(),
  trustWallet(),
  bitgetWallet(),
  metamask(metamaskOptions),
  walletConnectModule(walletConnectOptions),
];

const onboard = Onboard({
  wallets: wallets,
  chains: [
    {
      id: "0x1", // Ethereum Mainnet
      token: "ETH",
      label: "Ethereum Mainnet",
      rpcUrl:
        process.env.ETHEREUM_RPCURL ||
        "https://mainnet.infura.io/v3/920d560360ac4b7193a85e7d7448fcf8", // Replace with your Infura key
    },
    {
      id: "0x2105", // Base Mainnet (8453 in hex)
      token: "ETH",
      label: "Base Mainnet",
      rpcUrl: process.env.BASE_RPCURL || "https://mainnet.base.org", // Public Base RPC
    },
  ],
  appMetadata: {
    name: "indexmaker",
    description: "indexmaker APP",
    icon: `<svg width="728" height="213" viewBox="0 0 728 213" fill="none" xmlns="http://www.w3.org/2000/svg">
    <path d="M253.714 114.613C267.112 114.613 277.235 111.865 277.235 98.4468C277.235 88.7529 270.86 84.6152 261.358 83.2557L239.548 80.1229C223.317 77.8472 215.171 69.3945 215.171 54.7354C215.171 34.9337 232.229 26.7766 252.002 26.7766C264.574 26.7766 274.018 29.5547 280.393 35.0815C286.767 40.6082 290.279 47.9082 290.958 57.0111H276.792C275.081 43.6228 265.548 38.1552 251.855 38.1552C244.477 38.1552 238.988 39.6033 235.358 42.4702C231.728 45.3665 229.898 49.2973 229.898 54.3216C229.898 62.1832 234.767 66.439 242.499 67.6508L265.578 71.0496C285.174 73.8573 291.932 83.4921 291.932 96.5849C291.932 116.15 279.183 125.962 253.684 125.962C239.342 125.962 228.835 122.77 222.225 116.387C215.614 110.003 212.309 101.905 212.309 92.063H226.474C226.947 107.106 236.007 114.613 253.684 114.613H253.714Z" fill="black"/>
    <path d="M464.459 62.2423C447.932 62.2423 444.332 77.2265 444.332 93.7476V123.687H430.461V80.714C430.461 69.4536 426.683 62.2718 415.439 62.2718C399.001 62.2718 395.312 77.3447 395.312 93.7772V123.716H381.146V52.7848H395.312V68.2419C400.034 56.42 408.356 50.509 420.25 50.509C432.143 50.509 440.554 56.0653 443.328 68.8034C448.05 56.5973 456.697 50.509 469.24 50.509C485.471 50.509 493.616 60.1439 493.616 79.4431V123.716H479.451V80.7435C479.451 69.4241 475.614 62.3014 464.429 62.3014L464.459 62.2423Z" fill="black"/>
    <path d="M590.12 62.2423C573.594 62.2423 569.993 77.2265 569.993 93.7476V123.687H556.093V80.714C556.093 69.4536 552.316 62.2718 541.072 62.2718C524.663 62.2718 520.944 77.3152 520.944 93.7772V123.716H506.779V52.7848H520.944V68.2419C525.666 56.42 533.989 50.509 545.882 50.509C557.775 50.509 566.186 56.1244 568.96 68.8034C573.682 56.5973 582.329 50.509 594.872 50.509C611.103 50.509 619.249 60.1439 619.249 79.4431V123.716H605.083V80.7435C605.083 69.4832 601.305 62.3014 590.061 62.3014L590.12 62.2423Z" fill="black"/>
    <path d="M654.928 88.0731C654.928 66.2026 667.855 50.4795 691.464 50.4795C715.074 50.4795 728 65.9366 728 88.0731C728 110.21 715.221 125.962 691.464 125.962C667.707 125.962 654.928 110.032 654.928 88.0731ZM691.464 114.613C708.286 114.613 713.716 105.215 713.716 88.2209C713.716 71.2269 708.316 61.8285 691.464 61.8285C674.613 61.8285 669.212 71.1974 669.212 88.2209C669.212 105.244 674.613 114.613 691.464 114.613Z" fill="black"/>
    <path d="M631.378 29.3479H646.252V42.1155H631.378V29.3479ZM631.732 52.7552H645.898V123.687H631.732V52.7552Z" fill="black"/>
    <path d="M361.196 52.7552L361.137 52.903L337.941 113.608L335.462 120.731L333.19 113.608L310.554 52.7257H295.975L322.742 123.657H334.134L327.641 140.651H306.688V152H318.876C324.454 152 328.792 151.261 331.891 149.754C335.019 148.217 337.469 146 339.269 143.074C341.069 140.149 343.106 135.745 345.348 129.893L374.978 52.7257H361.226L361.196 52.7552Z" fill="black"/>
    <path d="M56.2792 123.687L55.9841 124.189L56.2792 123.687ZM85.9977 0L69.0284 24.3827L85.9977 48.4698L102.967 24.3827L85.9977 0ZM112.086 37.505L95.8842 62.5083L138.913 123.657H171.966L112.057 37.505H112.086ZM85.9977 77.8176L56.2792 123.657H115.716L85.9977 77.8176ZM116.041 124.159L115.746 123.657L116.041 124.159ZM59.9092 37.5345L0 123.687H33.0533L76.0817 62.5378L59.8797 37.5641L59.9092 37.5345Z" fill="black"/>
    <path d="M473.616 151.5V210.435H464.5V151.5H473.616Z" fill="black" stroke="black"/>
    <path d="M506.98 165.684C511.803 165.684 515.505 167.098 517.988 169.995C520.459 172.878 521.651 177.144 521.651 182.698V210.367H513.333V184.829C513.333 183.348 513.331 182.068 513.142 181.059C512.934 179.951 512.812 178.887 512.43 177.804C512.047 176.718 511.548 175.858 510.951 175.261C510.342 174.651 509.471 174.084 508.387 173.638C507.339 173.206 506.013 173.01 504.452 173.01C500.986 173.01 498.408 174.158 496.521 176.426C494.627 178.7 493.643 182.03 493.643 186.561V210.367H486.031L485.258 211.142V166.416H493.576V171.727C496.581 167.688 501.091 165.684 506.98 165.684Z" fill="black" stroke="black"/>
    <path d="M568.885 151.5V210.435H560.567V205.22C557.516 209.429 552.996 211.5 547.029 211.5C544.43 211.5 541.964 210.952 539.704 209.924C537.44 208.894 535.452 207.383 533.81 205.465C532.167 203.547 530.806 201.158 529.855 198.236C528.911 195.334 528.44 192.172 528.435 188.625H528.434V188.559H528.435C528.446 181.648 530.196 176.083 533.675 171.986L533.679 171.983C537.228 167.884 541.687 165.751 547.029 165.751C552.995 165.751 557.516 167.821 560.567 172.029V151.5H568.885ZM548.825 173.01C545.105 173.01 542.272 174.349 540.316 177.064L539.561 178.113C538.07 180.743 537.284 184.192 537.284 188.625C537.284 193.753 538.335 197.566 540.313 200.315L540.5 200.561C542.452 203.059 545.227 204.374 548.825 204.374C550.419 204.374 551.949 204.054 553.353 203.48C554.753 202.842 556.028 201.949 557.178 200.734C558.309 199.539 559.21 197.88 559.859 195.863C560.508 193.783 560.899 191.371 560.899 188.691C560.899 186 560.571 183.594 559.862 181.529L559.857 181.516C559.21 179.441 558.312 177.848 557.178 176.649C556.025 175.431 554.747 174.537 553.342 173.897C551.958 173.268 550.436 173.01 548.825 173.01Z" fill="black" stroke="black"/>
    <path d="M587.646 166.416V210.435H579.328V166.416H587.646ZM587.646 151.5V161.29H579.328V151.5H587.646Z" fill="black" stroke="black"/>
    <path d="M616.153 165.684C618.742 165.684 621.202 166.161 623.394 167.053C625.575 167.94 627.501 169.174 628.956 170.699C630.38 172.192 631.605 173.827 632.561 175.603C633.525 177.396 634.072 179.32 634.345 181.229L634.426 181.8H626.055L625.975 181.397C625.463 178.84 624.255 176.809 622.48 175.286C620.726 173.781 618.388 173.01 615.621 173.01C612.176 173.01 609.454 174.277 607.22 176.896C605 179.499 603.946 183.289 603.946 188.425C603.946 193.556 605.065 197.485 607.29 200.158C609.529 202.848 612.252 204.174 615.621 204.174C618.521 204.174 620.854 203.402 622.672 201.771L622.679 201.765C624.529 200.168 625.737 198.194 626.312 195.832L626.404 195.45H634.91L634.808 196.036C634.054 200.355 631.86 204.055 628.313 206.99C624.757 209.933 620.451 211.433 615.421 211.433C609.108 211.433 604.172 209.319 600.538 205.064C597.006 200.929 595.251 195.515 595.166 188.992H595.096V188.492C595.096 184.168 595.906 180.23 597.54 176.822C599.178 173.407 601.638 170.67 604.847 168.688C608.061 166.703 611.814 165.684 616.153 165.684Z" fill="black" stroke="black"/>
    <path d="M660.595 165.75C664.735 165.75 668.359 166.767 671.448 168.759L672.059 169.171L672.064 169.175C675.267 171.494 677.657 174.5 679.156 178.32H679.155C680.378 181.382 680.986 184.774 680.986 188.358C680.986 189.153 680.986 190.04 680.918 190.863L680.88 191.322H648.463C648.555 195.177 649.716 198.21 651.972 200.529C654.336 202.96 657.266 204.173 660.728 204.173C663.866 204.173 666.211 203.583 667.891 202.4C669.605 201.193 670.946 199.537 671.91 197.284L672.04 196.981H680.475L680.304 197.612C679.212 201.643 677.022 204.999 673.607 207.598L673.608 207.599C670.242 210.212 665.935 211.499 660.794 211.499C657.408 211.499 654.28 210.89 651.551 209.729C648.824 208.569 646.561 206.925 644.842 204.86V204.859C643.064 202.804 641.774 200.349 640.828 197.576L640.824 197.565C639.944 194.785 639.471 191.804 639.471 188.559C639.471 181.732 641.432 176.205 645.396 172.032C649.356 167.864 654.413 165.75 660.595 165.75ZM660.595 172.876C656.97 172.876 654.112 173.91 651.962 175.998C649.912 177.989 648.762 180.686 648.489 184.196H672.183C672.019 181.203 670.942 178.617 668.998 176.366V176.365C666.976 174.091 664.192 172.876 660.595 172.876Z" fill="black" stroke="black"/>
    <path d="M704.57 165.75C709.313 165.75 713.293 166.972 716.33 169.459C719.358 171.939 721.278 175.314 721.962 179.556L722.056 180.135H714.087L713.996 179.75C713.455 177.455 712.354 175.774 710.688 174.656C709.01 173.531 706.706 172.943 703.705 172.943C702.082 172.943 700.591 173.138 699.23 173.462C697.902 173.778 696.787 174.343 695.93 175.14L695.923 175.146L695.917 175.151C695.027 175.923 694.625 176.852 694.625 177.903C694.625 179.443 695.108 180.481 696.093 181.235C697.135 182.033 698.775 182.679 701.141 183.206H701.142L706.863 184.339L706.894 184.345L706.924 184.354C709.305 185.149 711.287 185.744 713.003 186.207C714.729 186.622 716.378 187.38 717.879 188.336C719.33 189.26 720.403 190.491 721.216 191.897L721.375 192.182L721.382 192.192L721.388 192.205C722.154 193.808 722.567 195.615 722.567 197.682C722.567 201.968 720.829 205.381 717.44 207.873C714.074 210.348 709.771 211.566 704.57 211.566C701.664 211.566 699.008 211.16 696.612 210.27C694.239 209.387 692.187 208.227 690.536 206.781C688.889 205.339 687.655 203.69 686.699 201.913C685.734 200.119 685.187 198.195 684.915 196.218L684.91 196.184V195.583H693.535L693.617 195.982C694.198 198.823 695.41 200.902 697.222 202.277C699.038 203.657 701.515 204.373 704.703 204.373C707.564 204.373 709.863 203.788 711.629 202.715C713.37 201.657 714.249 200.207 714.249 198.48C714.249 196.707 713.527 195.263 712.065 194.227C710.55 193.152 708.432 192.372 705.674 191.846H705.67L699.354 190.58V190.581C697.592 190.242 696.031 189.766 694.671 189.222C693.314 188.678 691.95 187.997 690.649 187.106C689.307 186.187 688.256 184.919 687.491 183.388C686.718 181.839 686.374 180.094 686.374 178.17C686.374 174.323 688.136 171.241 691.594 169.025C695.022 166.829 699.381 165.75 704.57 165.75Z" fill="black" stroke="black"/>
    </svg>
    `,
    recommendedInjectedWallets: [
      { name: "Coinbase Wallet", url: "https://www.coinbase.com/wallet" },
      { name: "Trust Wallet", url: "https://trustwallet.com/" },
      { name: "Bitget Wallet", url: "https://web3.bitget.com/" },
      { name: "Metamask Wallet", url: "https://metamask.io/" },
      { name: "WalletConnect", url: "https://walletconnect.com/" },
    ],
  },
  notify: notifyOptions,
  accountCenter: {
    desktop: {
      enabled: false, // Disable desktop account center
    },
    mobile: {
      enabled: false, // Disable mobile account center
    },
  },
  // theme: 'dark'
});

// Function to switch networks
export const switchNetwork = async (chainId: string) => {
  const connectedWallets = onboard.state.get().wallets;
  if (connectedWallets.length === 0) {
    console.error("No wallet connected");
    return;
  }

  const wallet = connectedWallets[0];
  try {
    await onboard.setChain({ chainId });
    console.log(`Switched to chain: ${chainId}`);
  } catch (error) {
    console.error("Failed to switch network:", error);
  }
};

export const autoConnectWallet = async () => {
  try {
    // Check if any wallet is already connected
    const previouslyConnectedWallets = onboard.state.get().wallets;
    if (previouslyConnectedWallets.length > 0) {
      return previouslyConnectedWallets;
    }

    // Attempt silent connection (works for injected wallets like MetaMask/Rabby)
    const wallets = await onboard.connectWallet({
      autoSelect: { label: "injected", disableModals: true },
    });

    return wallets;
  } catch (error) {
    console.error("Auto-connect failed:", error);
    return null;
  }
};

export default onboard;
